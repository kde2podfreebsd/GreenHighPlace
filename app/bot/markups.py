from telebot import types
from telegram_bot_pagination import InlineKeyboardPaginator
from app.models import ProductModel as pm
from app.models import CustomerModel as db
from app.models import ActiveOrderModel as ao
hideMenu = types.ReplyKeyboardRemove()

# –¥–æ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—å-–∫—É–ø–∏—Ç—å

toBuyMarkupRU = "–ö—É–ø–∏—Ç—å üõç"
toProfileMarkupRU = "–ü—Ä–æ—Ñ–∏–ª—å üë§"
toBuyMarkupEN = "Buy üõç"
toProfileMarkupEN = "Profile üë§"

start_msg = '''
Hi!
Choose language

–ü—Ä–∏–≤–µ—Ç!
–í—ã–±–µ—Ä–∏ —è–∑—ã–∫
    '''

switchLanguage = types.InlineKeyboardMarkup(row_width=1)
languageEN = types.InlineKeyboardButton("English üá∫üá∏", callback_data="EN")
languageRU = types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="RU")
switchLanguage.add(languageEN, languageRU)


def welcomeText(language: str):
    if language == "RU":
        return '''–ü—Ä–∏–≤–µ—Ç!
–¢—ã –≤ –∫—Ä—É—Ç–æ–º –º–∞–≥–∞–∑–∏–Ω–µ –Ω–∞ –∫—Ä—É—Ç–æ–º –æ—Å—Ç—Ä–æ–≤–µ
–ú–æ–∂–µ—à—å —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑ –∏ –æ—Ñ–æ—Ä–º–∏—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É'''

    if language == "EN":
        return '''Hello!
You are in the cool boshkiShop on cool Island
You can make an order and do delivery'''


def askLocation(language: str):
    if language == "RU":
        return "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é"

    if language == "EN":
        return "Write your address or send geolocation"


sendLocationRU = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é üìç", request_location=True)
writeLocationRU = types.KeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∞–¥—Ä–µ—Å —Ç–µ–∫—Å—Ç–æ–º üèò")
passLocationRU = types.KeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Å–µ–π—á–∞—Å ‚û°Ô∏è")
sendLocationEN = types.KeyboardButton("Send location üìç", request_location=True)
writeLocationEN = types.KeyboardButton("Write the address in text üèò")
passLocationEN = types.KeyboardButton("Pass now ‚û°")


def menuLocation(language: str):
    menuLocation = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True, one_time_keyboard=True)

    if language == "RU":

        return menuLocation.add(sendLocationRU, writeLocationRU, passLocationRU)

    elif language == "EN":

        return menuLocation.add(sendLocationEN, writeLocationEN, passLocationEN)


def menuBuyProfile(language: str):
    menuBuyProfile = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)

    if language == "RU":
        toBuyRU = types.KeyboardButton(toBuyMarkupRU)
        toProfileRU = types.KeyboardButton(toProfileMarkupRU)
        return menuBuyProfile.add(toBuyRU, toProfileRU)

    elif language == "EN":
        toBuyEN = types.KeyboardButton(toBuyMarkupEN)
        toProfileEN = types.KeyboardButton(toProfileMarkupEN)
        return menuBuyProfile.add(toBuyEN, toProfileEN)


passCommentRU = types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å ‚û°Ô∏è", callback_data="passCommentAdress")
passCommentEN = types.InlineKeyboardButton("Pass ‚û°Ô∏è", callback_data="passCommentAdress")


# toBackEN = types.InlineKeyboardButton("To back", callback_data="toBackFromCommentAdress")

def toCommentAdress(language: str):
    toCommentAdress = types.InlineKeyboardMarkup(row_width=1)

    if language == "RU":

        return toCommentAdress.add(passCommentRU)

    elif language == "EN":

        return toCommentAdress.add(passCommentEN)


def addressInfo(language: str, address: str):
    if language == "RU":
        return f'–ê–¥—Ä–µ—Å: {address}\n–ï—Å–ª–∏ –æ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π, –∏–∑–º–µ–Ω–∏—Ç–µ –µ–≥–æ –≤ –ø—Ä–æ—Ñ–∏–ª–µ'

    elif language == "EN":
        return f'Address: {address}\nIf it incorrect, change one in profile'


def toCommentAddress(language: str):
    if language == "RU":
        return '–£–∫–∞–∂–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É:'
    elif language == "EN":
        return 'Write comment for adrress:'


def inviteToWriteAddress(language: str):
    if language == "RU":
        return '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–æ–ª–Ω—ã–π –∞–¥—Ä–µ—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ:'
    elif language == "EN":
        return 'Write your complete address and send:'


def addressAddedSuccessfully(language: str):
    if language == "RU":
        return '–ê–¥—Ä–µ—Å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n–ú–æ–∂–µ—à—å –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –∫ –ø–æ–∫—É–ø–∫–∞–º!'
    elif language == "EN":
        return 'Address has added successfully!\nYou can go to buy!'


toShopRU = types.InlineKeyboardButton("–í –º–∞–≥–∞–∑–∏–Ω üõç", callback_data="toShop")
toShopEN = types.InlineKeyboardButton("To shop üõç", callback_data="toShop")
toProfileRU = types.InlineKeyboardButton("–í –ø—Ä–æ—Ñ–∏–ª—å üë§", callback_data="backToProfile")
toProfileEN = types.InlineKeyboardButton("To profile üë§", callback_data="backToProfile")
def toShop(language: str):
    toShop = types.InlineKeyboardMarkup(row_width=1)

    if language == "RU":
        return toShop.add(toShopRU, toProfileRU)

    elif language == "EN":
        return toShop.add(toShopEN, toProfileEN)


def indexAddreessLater(language: str):
    if language == "RU":
        return "–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è, —Ç—ã –º–æ–∂–µ—à—å —É–∫–∞–∑–∞—Ç—å –∞–¥—Ä–µ—Å –≤ –ø—Ä–æ—Ñ–∏–ª–µ"

    elif language == "EN":
        return "If it'll be need, you can point address at profile"


# –ø—Ä–æ—Ñ–∏–ª—å
profileMarkup = types.InlineKeyboardMarkup(row_width=1)
profileButtonRU1 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –∞–¥—Ä–µ—Å üèò", callback_data="changeAddress")
profileButtonRU2 = types.InlineKeyboardButton("–ú–æ–∏ –∑–∞–∫–∞–∑—ã üíå", callback_data="myOrders")
profileButtonRU3 = types.InlineKeyboardButton("–ö–æ—Ä–∑–∏–Ω–∞ üõí", callback_data="bin")
# profileButtonRU4 = types.InlineKeyboardButton("–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞", callback_data="refSystem")
profileButtonRU6 = types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ üá∑üá∫üá∫üá∏", callback_data="changeLanguage")

profileButtonEN1 = types.InlineKeyboardButton("Change address üèò", callback_data="changeAddress")
profileButtonEN2 = types.InlineKeyboardButton("My orders üíå", callback_data="myOrders")
profileButtonEN3 = types.InlineKeyboardButton("Cart üõí", callback_data="bin")
# profileButtonEN4 = types.InlineKeyboardButton("Ref system", callback_data="refSystem")
profileButtonEN6 = types.InlineKeyboardButton("Change language üá∑üá∫üá∫üá∏", callback_data="changeLanguage")


def profileMenu(language: str):
    profileMarkup = types.InlineKeyboardMarkup(row_width=1)
    if language == "RU":
        return profileMarkup.add(profileButtonRU3, profileButtonRU2, profileButtonRU1,
                                 profileButtonRU6)

    elif language == "EN":
        return profileMarkup.add(profileButtonEN3, profileButtonEN2, profileButtonEN1,
                                 profileButtonEN6)


def getInfoProfile(language: str, address: str, comment: str):
    if language == "RU":
        return f'''*–ü—Ä–æ—Ñ–∏–ª—å*
*–ê–¥—Ä–µ—Å:* {address if address is not None else "–Ω–µ —É–∫–∞–∑–∞–Ω"}
*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É:* {comment if comment is not None else "–Ω–µ —É–∫–∞–∑–∞–Ω"}'''

    elif language == "EN":
        return f'''*Profile*
*Address:* {address if address is not None else "didn't point"}
*Comment for address:* {comment if comment is not None else "didn't point"}'''


def textOfChangingLanguage(language: str):
    if language == "RU":
        return '–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫'

    elif language == "EN":
        return 'Choose language'


switchLanguageProfile = types.InlineKeyboardMarkup(row_width=1)
languageProfileEN = types.InlineKeyboardButton("English üá∫üá∏", callback_data="profileEN")
languageProfileRU = types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="profileRU")
switchLanguageProfile.add(languageProfileEN, languageProfileRU)


# —à–æ–ø

class sliderShopPaginator(InlineKeyboardPaginator):
    first_page_label = '<<'
    previous_page_label = '<-'
    current_page_label = '¬∑  {}  ¬∑'
    next_page_label = '->'
    last_page_label = '>>'


def textShop(language, products):
    if len(products) != 0:
        if language == "RU":
            return "–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π –∏ –Ω–∞–∂–º–∏—Ç–µ"
        elif language == "EN":
            return "List of products\nChoose you needed and push"
    else:
        if language == "RU":
            return "–°–µ–π—á–∞—Å —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ üòî"
        if language == "EN":
            return "Now at shop there aren't products üòî"


def sliderShop(page, products, language):
    if len(products) != 0:

        nameOfProducts = list(i.name for i in products)
        idOrders = list(i.id for i in products)
        paginator = sliderShopPaginator(page_count=len(nameOfProducts),
                                        current_page=page,
                                        data_pattern='listProduct#{page}')

        lookProduct = types.InlineKeyboardButton('{}'.format(nameOfProducts[page - 1]),
                                                 callback_data='productName#{}'.format(idOrders[page - 1]))
        paginator.add_before(lookProduct)

        if language == "RU":

            toBackButton = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data='backToProfile')
            paginator.add_after(toBackButton)

        elif language == "EN":

            toBackButton = types.InlineKeyboardButton('Back ‚¨ÖÔ∏è', callback_data='backToProfile')
            paginator.add_after(toBackButton)

        return paginator.markup

    else:
        menuBack = types.InlineKeyboardMarkup(row_width=1)
        if language == "RU":
            toBack = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="backToProfile")
            return menuBack.add(toBack)
        if language == "EN":
            toBack = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="backToProfile")
            return menuBack.add(toBack)


class sliderProductPaginator(InlineKeyboardPaginator):
    first_page_label = ''
    previous_page_label = ' - '
    next_page_label = ' + '
    last_page_label = ''


def textProduct(name, infoAbout, price, language):
    if language == "RU":
        return f'''{name}
        
{infoAbout.split("#")[0]}

–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –æ—Å—Ç—Ä–æ–≤—É
1 –≥—Ä–∞–º–º - {price} BATH'''

    elif language == "EN":
        return f'''{name}
        
{infoAbout.split('#')[1]}

Delivery on the whole Island
1 gram - {price} BATH'''


def sliderProduct(page, name, price, language):
    paginator = sliderProductPaginator(
        page_count=500,
        current_page=page,
        data_pattern='coast#' + name + '#{page}'
    )
    paginator.current_page_label = '{}' + ' | {} BATH'.format(int(page) * price)

    if language == "RU":

        # toChooseNumberOf = types.InlineKeyboardButton('–£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ', callback_data='toChooseNumberOf')
        # toOrderDelivery = types.InlineKeyboardButton('–ó–∞–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∞–≤–∫—É', callback_data='toOrderDelivery')
        toCart = types.InlineKeyboardButton('–í –∫–æ—Ä–∑–∏–Ω—É üõí', callback_data='toCart#{}#{}'.format(name, int(page)))
        toBackButton = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data='toShopFromVideo')
        paginator.add_before(toCart)
        paginator.add_after(toBackButton)

    elif language == "EN":

        # toChooseNumberOf = types.InlineKeyboardButton('Indicate quantity', callback_data='toChooseNumberOf')
        # toOrderDelivery = types.InlineKeyboardButton('Order delivery', callback_data='toOrderDelivery')
        toCart = types.InlineKeyboardButton('Add to cart üõí', callback_data='toCart#{}#{}'.format(name, int(page)))
        toBackButton = types.InlineKeyboardButton('Back ‚¨ÖÔ∏è', callback_data='toShopFromVideo')

        paginator.add_before(toCart)
        paginator.add_after(toBackButton)

    return paginator.markup


def infoCart(num: int, language: str):
    if language == "RU":
        return "–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ: {}\n–û—Ñ–æ—Ä–º–∏ –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å".format(num)

    elif language == "EN":
        return "Items in the cart: {}\nPlace an order through your profile".format(num)


def textTrash(products, language):
    if len(products) != 0:

        if language == "RU":
            head = "*–¢–æ–≤–∞—Ä–æ–≤ –≤ –∫–æ—Ä–∑–∏–Ω–µ:* {}\n\n–ù–∞–∂–º–∏ –Ω–∞ —Ç–æ–≤–∞—Ä —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å".format(len(products))

            return head

        if language == "EN":
            head = "*Items in the cart:* {}\n\nTouch on product for delete or change".format(len(products))

            return head

    else:
        if language == "RU":
            return "–¢–≤–æ—è –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞ ü§∑‚Äç‚ôÄÔ∏è"
        if language == "EN":
            return "Your cart is empty ü§∑‚Äç‚ôÄÔ∏è"


# def trashMenu(products, language):
#
#     trashMenu = types.InlineKeyboardMarkup(row_width=1)
#
#     if len(products) != 0:
#
#         totalsum = 0
#         for product in products:
#             product = str(product)
#
#             if pm.getPrice(product.split('#')[0]) != 0:
#
#                 name = product.split('#')[0]
#
#                 price = pm.getPrice(name)
#                 num = int(product.split('#')[1])
#                 sum = num * price
#                 totalsum += sum
#
#         if language == "RU":
#             toDeliver = types.InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å | {} BATH".format(totalsum), callback_data="toDeliver#{}".format(totalsum))
#             toClearBin = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="toClearBinWarning")
#             toBack = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="backToProfile")
#             trashMenu.add(toDeliver, toClearBin, toBack)
#
#         if language == "EN":
#             toDeliver = types.InlineKeyboardButton("Order | {} BATH".format(totalsum), callback_data="toDeliver#{}".format(totalsum))
#             toClearBin = types.InlineKeyboardButton("Empty trash", callback_data="toClearBinWarning")
#             toBack = types.InlineKeyboardButton("To back", callback_data="backToProfile")
#             trashMenu.add(toDeliver, toClearBin, toBack)
#     else:
#         if language == "RU":
#             toBack = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="backToProfile")
#             trashMenu.add(toBack)
#
#         if language == "EN":
#             toBack = types.InlineKeyboardButton("To back", callback_data="backToProfile")
#             trashMenu.add(toBack)
#
#     return trashMenu

def trashMenu(products, language):
    trashMenu = types.InlineKeyboardMarkup(row_width=1)

    if len(products) != 0:

        totalsum = 0
        i = 0
        for product in products:

            if pm.getPrice(product.idFromProduct) is not False:

                name = product.nameOfProduct

                price = pm.getPrice(product.idFromProduct)
                num = product.numOfProducts
                sum = num * price
                totalsum += sum

                if language == "RU":
                    button = types.InlineKeyboardButton(f"üåø {name} | {str(num)} –≥—Ä–∞–º–º | {price * num} BATH",
                                                        callback_data=f"toEdit#{product.id}")
                    trashMenu.add(button)
                if language == "EN":
                    button = types.InlineKeyboardButton(f"üåø {name} | {str(num)} gramm | {price * num} BATH",
                                                        callback_data=f"toEdit#{product.id}")
                    trashMenu.add(button)

            i += 1

        if language == "RU":
            toDeliver = types.InlineKeyboardButton("üöö –ó–∞–∫–∞–∑–∞—Ç—å | {} BATH".format(totalsum),
                                                   callback_data="toDeliver#{}".format(totalsum))
            toClearBin = types.InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="toClearBinWarning")
            toBack = types.InlineKeyboardButton("‚¨Ö –ù–∞–∑–∞–¥Ô∏è", callback_data="backToProfile")
            trashMenu.add(toDeliver, toClearBin, toBack)

        if language == "EN":
            toDeliver = types.InlineKeyboardButton("üöö Order | {} BATH".format(totalsum),
                                                   callback_data="toDeliver#{}".format(totalsum))
            toClearBin = types.InlineKeyboardButton("üßπ Empty trash", callback_data="toClearBinWarning")
            toBack = types.InlineKeyboardButton("‚¨Ö BackÔ∏è", callback_data="backToProfile")
            trashMenu.add(toDeliver, toClearBin, toBack)



    else:
        if language == "RU":
            toBack = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="backToProfile")
            trashMenu.add(toBack)

        if language == "EN":
            toBack = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="backToProfile")
            trashMenu.add(toBack)

    return trashMenu


def areYouSureText(language):
    if language == "RU":
        return "–¢—ã —É–≤–µ—Ä–µ–Ω?"

    if language == "EN":
        return "Are you sure?"


def areYouSureMenu(language):
    areYouSure = types.InlineKeyboardMarkup(row_width=1)

    if language == "RU":
        yes = types.InlineKeyboardButton("–û—á–∏—Å—Ç–∏—Ç—å üßπ", callback_data="toClearBin")
        no = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="bin")
        return areYouSure.add(yes, no)

    if language == "EN":
        yes = types.InlineKeyboardButton("To empty üßπ", callback_data="toClearBin")
        no = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="bin")
        return areYouSure.add(yes, no)


def beforeOrderText(address: str, comment: str, language: str):
    if address is not None:
        if language == "RU":
            return f'''*–ê–¥—Ä–µ—Å:* {address}
*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É:* {comment if comment is not None else "–Ω–µ —É–∫–∞–∑–∞–Ω"}'''

        elif language == "EN":
            return f'''*Address:* {address}
*Comment for address:* {comment if comment is not None else "didn't point"}'''

    else:
        if language == "RU":
            return "–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –∞–¥—Ä–µ—Å, —É–∫–∞–∂–∏—Ç–µ –µ–≥–æ –¥–ª—è –∑–∞–∫–∞–∑–∞"
        if language == "EN":
            return "You didn't point address. Point it for order"


def beforeOrderMenu(address: str, language: str, fullprice: int):
    confirmMenu = types.InlineKeyboardMarkup(row_width=1)

    if address is not None:

        if language == "RU":
            confirm = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="toConfirm#{}".format(fullprice))
            badAddress = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="backToProfile")
            return confirmMenu.add(confirm, badAddress)
        if language == "EN":
            confirm = types.InlineKeyboardButton("Confirm ‚úÖ", callback_data="toConfirm#{}".format(fullprice))
            badAddress = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="backToProfile")
            return confirmMenu.add(confirm, badAddress)

    else:
        if language == "RU":
            badAddress = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="backToProfile")
            return confirmMenu.add(badAddress)
        if language == "EN":
            badAddress = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="backToProfile")
            return confirmMenu.add(badAddress)


def chooseMethodPayText(language: str):
    if language == "RU":
        return "–í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"

    if language == "EN":
        return "Choose method of pay"


def chooseMethodPayMenu(fullsum: int, language: str):
    methodsPay = types.InlineKeyboardMarkup(row_width=1)

    if language == "RU":
        forCash = types.InlineKeyboardButton("–ù–∞–ª–∏—á–Ω—ã–µ üí∞", callback_data="forCash#{}".format(fullsum))
        # forCard = types.InlineKeyboardButton("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", callback_data="forCryptocurrency#{}".format(fullsum))
        toBack = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="backToProfile")
        return methodsPay.add(forCash, toBack)

    if language == "EN":
        forCash = types.InlineKeyboardButton("Cash payment üí∞", callback_data="forCash#{}".format(fullsum))
        # forCard = types.InlineKeyboardButton("–°ryptocurrency", callback_data="forCryptocurrency#{}".format(fullsum))
        toBack = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="backToProfile")
        return methodsPay.add(forCash, toBack)


def infoOrderText(products: list, fullsum: int, address: str, comment: str, payment: str, language: str):
    if len(products) != 0:

        if language == "RU":

            head = "*–¢–æ–≤–∞—Ä–æ–≤:* {}\n\n*–¢–æ–≤–∞—Ä—ã:*  \n".format(len(products))

            for product in products:

                if pm.getPrice(product.idFromProduct) != 0:

                    name = product.nameOfProduct

                    price = pm.getPrice(product.idFromProduct)
                    num = product.numOfProducts
                    summ = num * price

                    head += "_{} - {} –≥—Ä–∞–º–º - {} BATH_\n".format(name, num, summ)

                else:
                    name = product.split('#')[0]
                    head += '–¢–æ–≤–∞—Ä "{}" —É–¥–∞–ª–µ–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞\n'.format(name)

            head += "\n*–ò—Ç–æ–≥–æ:* {} BATH".format(fullsum)
            head += "\n\n*–ê–¥—Ä–µ—Å:* {}" \
                    "\n\n*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É:* {}\n\n".format(address, comment if comment is not None else "–Ω–µ —É–∫–∞–∑–∞–Ω")

            if payment == "forCash":
                head += "*–ú–µ—Ç–æ–¥ –æ–ø–ª–∞—Ç—ã:* –Ω–∞–ª–∏—á–Ω—ã–µ"

            return head

        if language == "EN":

            head = "*Items:* {}\n\n*Items:*\n".format(len(products))

            for product in products:

                if pm.getPrice(product.idFromProduct) != 0:

                    name = product.nameOfProduct

                    price = pm.getPrice(product.idFromProduct)
                    num = product.numOfProducts
                    summ = num * price

                    head += "_{} - {} gramm - {} BATH_\n".format(name, num, summ)

                else:
                    name = product.split('#')[0]
                    head += 'Item "{}" was delete from shop\n'.format(name)

            head += "\n*Total:* {} BATH".format(fullsum)
            head += "\n\n*Address:* {}" \
                    "\n\n*Comment for address:* {}\n\n".format(address,
                                                             comment if comment is not None else "didn't point")

            if payment == "forCash":
                head += "*Payment:* cash"

            return head

    else:
        pass


def infoOrderMenu(fullprice: int, payment: str, language):
    orderMenu = types.InlineKeyboardMarkup(row_width=1)

    if language == "RU":
        orderConfirm = types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ",
                                                  callback_data="orderConfirm#{}#{}".format(fullprice, payment))
        orderRefuse = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="backToProfile")
        return orderMenu.add(orderConfirm, orderRefuse)

    if language == "EN":
        orderConfirm = types.InlineKeyboardButton("Confirm ‚úÖ",
                                                  callback_data="orderConfirm#{}#{}".format(fullprice, payment))
        orderRefuse = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="backToProfile")
        return orderMenu.add(orderConfirm, orderRefuse)


def confirmedOrderText(numberOfOrder: int, language: str):
    if language == "RU":
        return f'''*–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:* ‚Ññ{numberOfOrder}
*–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω*
–ú—ã –æ–ø–æ–≤–µ—Å—Ç–∏–º —Ç–µ–±—è, –∫—É—Ä—å–µ—Ä –ø—Ä–∏–º–µ—Ç –∑–∞–∫–∞–∑'''

    if language == "EN":
        return f'''*Number of order:* ‚Ññ{numberOfOrder}
*Order created succesfully*
We'll say you, when courier accepted the order'''


def confirmedOrderMenu(numberOfOrder: int, language: str):
    confirmedOrderMenu = types.InlineKeyboardMarkup(row_width=1)

    if language == "RU":
        toCurrentOrder = types.InlineKeyboardButton("–ö –∑–∞–∫–∞–∑—É üõç", callback_data="toCurrentOrder#{}".format(numberOfOrder))
        toBack = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="backToProfile")
        return confirmedOrderMenu.add(toCurrentOrder, toBack)

    if language == "EN":
        toCurrentOrder = types.InlineKeyboardButton("To order üõç", callback_data="toCurrentOrder#{}".format(numberOfOrder))
        toBack = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="backToProfile")
        return confirmedOrderMenu.add(toCurrentOrder, toBack)


class sliderOrderPaginator(InlineKeyboardPaginator):
    first_page_label = ''
    previous_page_label = ' < '
    next_page_label = ' > '
    last_page_label = ''


def textOrder(active, refusal, complete, language):
    if len(active + refusal + complete) != 0:
        if language == "RU":
            return '*–í—Å–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\nüü° - –∑–∞–∫–∞–∑ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ\nüî¥ - –∑–∞–∫–∞–∑ –æ—Ç–º–µ–Ω—ë–Ω\nüü¢ - –∑–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à—ë–Ω'

        if language == "EN":
            return '*All your orders:*\n\nüü° - active order\nüî¥ - refused order\nüü¢ - completed order'
    else:
        if language == "RU":
            return '–£ —Ç–µ–±—è –µ—â–µ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ ü§∑‚Äç‚ôÄÔ∏è'

        if language == "EN":
            return "You haven't orders yet ü§∑‚Äç‚ôÄÔ∏è"


def sliderOrder(page, active, refusal, complete, language):
    # print("---", refusal)
    active.reverse()
    refusal.reverse()
    complete.reverse()
    # print("---", refusal)

    orders = active + refusal + complete

    if len(orders) != 0:
        a = len(active)
        r = len(refusal)
        total = len(orders)

        paginator = sliderOrderPaginator(
            page_count=total,
            current_page=page,
            data_pattern='order#{page}'
        )

        paginator.current_page_label = '¬∑ {} ¬∑'
        print(orders[page - 1])
        if orders[page - 1] in active:
            lookOrder = types.InlineKeyboardButton("‚Ññ{} | {} BATH üü°".format(str(orders[page - 1]).split('-#-#-')[0],
                                                                            str(orders[page - 1]).split('-#-#-')[3]),
                                                   callback_data="lookActive#{}".format(page - 1))
            paginator.add_before(lookOrder)

        elif orders[page - 1] in refusal:
            lookOrder = types.InlineKeyboardButton("‚Ññ{} | {} BATH üî¥".format(str(orders[page - 1]).split('-#-#-')[9],
                                                                            str(orders[page - 1]).split('-#-#-')[3]),
                                                   callback_data="lookRefusal#{}".format(page - 1 - a))
            paginator.add_before(lookOrder)

        elif orders[page - 1] in complete:

            lookOrder = types.InlineKeyboardButton("‚Ññ{} | {} BATH üü¢".format(str(orders[page - 1]).split('-#-#-')[9],
                                                                            str(orders[page - 1]).split('-#-#-')[3]),
                                                   callback_data="lookComplete#{}".format(page - 1 - a - r))
            paginator.add_before(lookOrder)

        if language == "RU":

            toBackButton = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data='backToProfile')
            paginator.add_after(toBackButton)

        elif language == "EN":

            toBackButton = types.InlineKeyboardButton('Back ‚¨ÖÔ∏è', callback_data='backToProfile')
            paginator.add_after(toBackButton)

        return paginator.markup

    else:
        backingMenu = types.InlineKeyboardMarkup(row_width=1)

        if language == "RU":
            backingButton = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="backToProfile")
            return backingMenu.add(backingButton)
        if language == "EN":
            backingButton = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="backToProfile")
            return backingMenu.add(backingButton)


def showActiveOrderText(activeOrders: list, choosedOrder: int, language: str):
    print(activeOrders)
    activeOrders.reverse()
    order = activeOrders[choosedOrder]
    order = str(order)

    if language == "RU":
        head = f"*–ó–∞–∫–∞–∑ ‚Ññ{order.split('-#-#-')[0]}*\n\n*–¢–æ–≤–∞—Ä—ã:*\n"
        items = order.split('-#-#-')[2]

        for item in items[:-1].split(','):
            head += "_{} - {} –≥—Ä–∞–º–º - {} BATH_\n".format(
                item.split('#')[0],
                item.split('#')[1],
                int(item.split('#')[1]) * int(item.split('#')[2])
            )

        head += f"\n*–ò—Ç–æ–≥–æ:* {order.split('-#-#-')[3]} BATH"
        head += f"\n\n*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:* {order.split('-#-#-')[4]}"
        head += f"\n\n*–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* {order.split('-#-#-')[5]}"
        head += f"\n\n*–ê–¥—Ä–µ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞:* {order.split('-#-#-')[7]}"
        head += f"\n\n*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É:* " \
                f"{order.split('-#-#-')[8] if order.split('-#-#-')[8] != 'None' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        if order.split('-#-#-')[6].split("#")[0] == "–ü–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É":
            head += f"\n\n*–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:* {order.split('-#-#-')[6].split('#')[0]}"
            if order.split('-#-#-')[6].split('#')[1] != "":
                head += f"\n*–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:*\n{order.split('-#-#-')[6].split('#')[1]}"
        else:
            head += f"\n\n*–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:* {order.split('-#-#-')[6]}"
        return head

    if language == "EN":
        head = f"*Order ‚Ññ{order.split('-#-#-')[0]}*\n\n*Items:*\n"
        items = order.split('-#-#-')[2]

        for item in items[:-1].split(','):
            head += "_{} - {} gramm - {} BATH_\n".format(
                item.split('#')[0],
                item.split('#')[1],
                int(item.split('#')[1]) * int(item.split('#')[2])
            )

        head += f"\n*Total:* {order.split('-#-#-')[3]} BATH"
        head += f"\n\n*Date and time order:* {order.split('-#-#-')[4]}"
        head += f"\n\n*Payment:* {'cash' if order.split('-#-#-')[5] == '–Ω–∞–ª–∏—á–Ω—ã–µ' else '-'}"
        head += f"\n\n*Address for order:* {order.split('-#-#-')[7]}"
        head += f"\n\n*Comment for address:* " \
                f"{order.split('-#-#-')[8] if order.split('-#-#-')[8] != 'None' else 'did not point'}"
        if order.split('-#-#-')[6].split("#")[0] == "–ü–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É":
            head += f"\n\n*Status order:* sent for delivery"
            if order.split('-#-#-')[6].split('#')[1] != "":
                head += f"\n*Estimated delivery time:*\n{order.split('-#-#-')[6].split('#')[1]}"
        else:
            head += f"\n\n*Status order:* waiting for courier"
        # head += f"\n\n*Status order:* {'waiting for courier' if order.split('-#-#-')[6] == '–æ–∂–∏–¥–∞–µ—Ç –∫—É—Ä—å–µ—Ä–∞' else 'sent for delivety'}"
        return head


def showActiveOrderMenu(activeOrders: list, choosedOrder: int, language: str):
    showActiveOrderMenu = types.InlineKeyboardMarkup(row_width=1)


    activeOrders.reverse()
    idActive = activeOrders[choosedOrder].id


    if language == "RU":
        # –¥–æ–±–∞–≤–∏—Ç—å id –æ—Ä–¥–µ—Ä–∞ –≤ –∫–æ–ª–±—ç–∫ –¥–∞—Ç—É
        toWriteCourier = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –∫—É—Ä—å–µ—Ä—É ‚úèÔ∏è", callback_data=f"toWriteCourier#{idActive}")
        toBack = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='myOrders')
        return showActiveOrderMenu.add(toWriteCourier, toBack)

    if language == "EN":
        toWriteCourier = types.InlineKeyboardButton("To write courier ‚úèÔ∏è", callback_data=f"toWriteCourier#{idActive}")
        toBack = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data='myOrders')
        return showActiveOrderMenu.add(toWriteCourier, toBack)


def showCompleteOrderText(completeOrders: list, choosedOrder: int, language: str):
    # print(completeOrders)
    completeOrders.reverse()
    order = completeOrders[choosedOrder]
    order = str(order)

    if language == "RU":
        head = f"*–ó–∞–∫–∞–∑ ‚Ññ{order.split('-#-#-')[9]}*\n\n*–¢–æ–≤–∞—Ä—ã:*\n"
        items = order.split('-#-#-')[2]

        for item in items[:-1].split(','):
            head += "_{} - {} –≥—Ä–∞–º–º - {} BATH_\n".format(
                item.split('#')[0],
                item.split('#')[1],
                int(item.split('#')[1]) * int(item.split('#')[2])
            )

        head += f"\n*–ò—Ç–æ–≥–æ:* {order.split('-#-#-')[3]} BATH"
        head += f"\n\n*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:* {order.split('-#-#-')[4]}"
        head += f"\n\n*–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* {order.split('-#-#-')[5]}"
        head += f"\n\n*–ê–¥—Ä–µ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞:* {order.split('-#-#-')[7]}"
        head += f"\n\n*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É:* " \
                f"{order.split('-#-#-')[8] if order.split('-#-#-')[8] != 'None' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        head += f"\n\n*–ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–∞:* {order.split('-#-#-')[6]}"
        return head

    if language == "EN":
        head = f"*Order ‚Ññ{order.split('-#-#-')[9]}*\n\n*Items:*\n"
        items = order.split('-#-#-')[2]

        for item in items[:-1].split(','):
            head += "_{} - {} gramm - {} BATH_\n".format(
                item.split('#')[0],
                item.split('#')[1],
                int(item.split('#')[1]) * int(item.split('#')[2])
            )

        head += f"\n*Total:* {order.split('-#-#-')[3]} BATH"
        head += f"\n\n*Date and time order:* {order.split('-#-#-')[4]}"
        head += f"\n\n*Payment:* {'cash' if order.split('-#-#-')[5] == '–Ω–∞–ª–∏—á–Ω—ã–µ' else '-'}"
        head += f"\n\n*Address for order:* {order.split('-#-#-')[7]}"
        head += f"\n\n*Comment for address:* " \
                f"{order.split('-#-#-')[8] if order.split('-#-#-')[8] != 'None' else 'did not point'}"
        head += f"\n\n*Order closing:* {order.split('-#-#-')[6]}"
        return head


def showCompleteOrderMenu(language: str):
    showCompleteOrderMenu = types.InlineKeyboardMarkup(row_width=1)

    if language == "RU":
        # –¥–æ–±–∞–≤–∏—Ç—å id –æ—Ä–¥–µ—Ä–∞ –≤ –∫–æ–ª–±—ç–∫ –¥–∞—Ç—É
        toBack = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data='myOrders')
        return showCompleteOrderMenu.add(toBack)

    if language == "EN":
        toBack = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data='myOrders')
        return showCompleteOrderMenu.add(toBack)


def showRefusalOrderText(refusalOrders: list, choosedOrder: int, language: str):
    # print(refusalOrders)
    refusalOrders.reverse()
    order = refusalOrders[choosedOrder]
    order = str(order)

    if language == "RU":
        head = f"*–ó–∞–∫–∞–∑ ‚Ññ{order.split('-#-#-')[9]}*\n\n*–¢–æ–≤–∞—Ä—ã:*\n"
        items = order.split('-#-#-')[2]

        for item in items[:-1].split(','):
            head += "_{} - {} –≥—Ä–∞–º–º - {} BATH_\n".format(
                item.split('#')[0],
                item.split('#')[1],
                int(item.split('#')[1]) * int(item.split('#')[2])
            )

        head += f"\n*–ò—Ç–æ–≥–æ:* {order.split('-#-#-')[3]} BATH"
        head += f"\n\n*–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞:* {order.split('-#-#-')[4]}"
        head += f"\n\n*–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:* {order.split('-#-#-')[5]}"
        head += f"\n\n*–ê–¥—Ä–µ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞:* {order.split('-#-#-')[7]}"
        head += f"\n\n*–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É:* " \
                f"{order.split('-#-#-')[8] if order.split('-#-#-')[8] != 'None' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        head += f"\n\n*–ó–∞–∫—Ä—ã—Ç–∏–µ –∑–∞–∫–∞–∑–∞:* {order.split('-#-#-')[6]}"
        head += f"\n*–ü—Ä–∏—á–∏–Ω–∞ –∑–∞–∫—Ä—ã—Ç–∏—è:* {order.split('-#-#-')[10]}"
        return head

    if language == "EN":
        head = f"*Order ‚Ññ{order.split('-#-#-')[9]}*\n\n*Items:*\n"
        items = order.split('-#-#-')[2]

        for item in items[:-1].split(','):
            head += "_{} - {} gramm - {} BATH_\n".format(
                item.split('#')[0],
                item.split('#')[1],
                int(item.split('#')[1]) * int(item.split('#')[2])
            )

        head += f"\n*Total:* {order.split('-#-#-')[3]} BATH"
        head += f"\n\n*Date and time order:* {order.split('-#-#-')[4]}"
        head += f"\n\n*Payment:* {'cash' if order.split('-#-#-')[5] == '–Ω–∞–ª–∏—á–Ω—ã–µ' else '-'}"
        head += f"\n\n*Address for order:* {order.split('-#-#-')[7]}"
        head += f"\n\n*Comment for address:* " \
                f"{order.split('-#-#-')[8] if order.split('-#-#-')[8] != 'None' else 'did not point'}"
        head += f"\n\n*Order closing:* {order.split('-#-#-')[6]}"
        head += f"\n*Reason of refusal:* {order.split('-#-#-')[10]}"
        return head


class sliderChangeBinPaginator(InlineKeyboardPaginator):
    first_page_label = ''
    previous_page_label = ' - '
    next_page_label = ' + '
    last_page_label = ''


def textBinProduct(language):
    if language == "RU":
        return '–ò–∑–º–µ–Ω–µ–Ω–∏–µ.......'

    elif language == "EN":
        return 'Changing.......'


def sliderChangeBin(page, product, language):
    paginator = sliderChangeBinPaginator(
        page_count=500,
        current_page=page,
        data_pattern='binslide#' + str(product.id) + '#{page}'
    )
    paginator.current_page_label = '¬∑ {} ¬∑'

    if language == "RU":

        productInfo = types.InlineKeyboardButton(f"{product.nameOfProduct} | "
                                                 f"{pm.getPrice(product.idFromProduct) * product.numOfProducts} BATH",
                                                 callback_data='nowork')

        toDeleteButton = types.InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å ‚ùå', callback_data=f'DeleteFromBin#{product.id}')
        toBackButton = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data='bin')
        paginator.add_before(productInfo)
        paginator.add_after(toBackButton, toDeleteButton)

    elif language == "EN":

        productInfo = types.InlineKeyboardButton(f"{product.nameOfProduct} | "
                                                 f"{pm.getPrice(product.idFromProduct) * product.numOfProducts} BATH",
                                                 callback_data='nowork')

        toDeleteButton = types.InlineKeyboardButton('Delete ‚ùå', callback_data=f'DeleteFromBin#{product.id}')
        toBackButton = types.InlineKeyboardButton('Back ‚¨ÖÔ∏è', callback_data='bin')
        paginator.add_before(productInfo)
        paginator.add_after(toBackButton, toDeleteButton)

    return paginator.markup


def deletedItemText(name, language):
    if language == "RU":
        return f'–¢—ã —Å–æ–≤–µ—Ä—à–∏–ª –æ—à–∏–±–∫—É, —É–¥–∞–ª–∏–≤ "{name}"'
    if language == "EN":
        return f'You made a mistake: "{name}" deleted'


toAdminTextRU = "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ"
toAdminTextEN = "Administration"
password = "123"

def toEnterPasswordText(language):
    if language == "RU":
        return "–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–æ—Å—Ç—É–ø–∞"
    if language == "EN":
        return "Enter password"

def passwordCorrectText(language):
    if language == "RU":
        return "–î–æ—Å—Ç—É–ø –æ–¥–æ–±—Ä–µ–Ω"
    if language == "EN":
        return "Access approved"


def passwordUncorrectText(language):
    if language == "RU":
        return "–û—Ç–∫–∞–∑–∞–Ω–æ –≤ –¥–æ—Å—Ç—É–ø–µ"
    if language == "EN":
        return "Access denied"

def helloBoss(language):
    if language == "RU":
        return "–ü—Ä–∏–≤–µ—Ç, –ë–æ—Å—Å!"
    if language == "EN":
        return "Hello, Boss!"

def helloMenu(language):
    bossMenu = types.InlineKeyboardMarkup(row_width=1)

    if language == "RU":
        orders = types.InlineKeyboardButton("–ó–∞–∫–∞–∑—ã", callback_data="adminOrders")
        postSale = types.InlineKeyboardButton("–ü–æ—Å—Ç-–∞–∫—Ü–∏—è", callback_data="adminPostSale")
        catalog = types.InlineKeyboardButton("–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤", callback_data="adminCatalog")
        lang = types.InlineKeyboardButton("–°–º–µ–Ω–∏—Ç—å —è–∑—ã–∫", callback_data="adminSwitchLanguage")
        exitAdmin = types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏", callback_data="exitAdmin")
        return bossMenu.add(orders, postSale, catalog, lang, exitAdmin)

    if language =="EN":
        orders = types.InlineKeyboardButton("Orders", callback_data="adminOrders")
        postSale = types.InlineKeyboardButton("Post news", callback_data="adminPostSale")
        catalog = types.InlineKeyboardButton("Catalog", callback_data="adminCatalog")
        lang = types.InlineKeyboardButton("Switch language", callback_data="adminSwitchLanguage")
        exitAdmin = types.InlineKeyboardButton("Exit admin", callback_data="exitAdmin")
        return bossMenu.add(orders, postSale, catalog, lang, exitAdmin)
def mainAdmin(language):
    adminMainMenu = types.ReplyKeyboardMarkup(row_width=1, resize_keyboard=True)
    if language == "RU":
        adminMainButton = types.KeyboardButton("–ù–∞ –≥–ª–∞–≤–Ω—É—é")
        return adminMainMenu.add(adminMainButton)
    if language == "EN":
        adminMainButton = types.KeyboardButton("Main menu")
        return adminMainMenu.add(adminMainButton)

def chooseListOrdersText(language):
    if language == "RU": return "–í—ã–±–µ—Ä–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤"
    if language == "EN": return "Choose list of orders"

def chooseListOrdersMenu(language):
    chooseListOrdersMenu = types.InlineKeyboardMarkup(row_width=1)
    if language == "RU":
        listActive = types.InlineKeyboardButton("–ê–∫—Ç–∏–≤–Ω—ã–µ", callback_data="activeList")
        listRefusal = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–µ–Ω–Ω—ã–µ", callback_data="refusalList")
        listComplete = types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ", callback_data="completeList")
        toBack = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="toMainAdmin")
        return chooseListOrdersMenu.add(listActive, listRefusal, listComplete, toBack)
    if language == "EN":
        listActive = types.InlineKeyboardButton("Active", callback_data="activeList")
        listRefusal = types.InlineKeyboardButton("Canceled", callback_data="refusalList")
        listComplete = types.InlineKeyboardButton("Completed", callback_data="completeList")
        toBack = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="toMainAdmin")
        return chooseListOrdersMenu.add(listActive, listRefusal, listComplete, toBack)

class adminSliderOrderPaginator(InlineKeyboardPaginator):
    first_page_label = '<<'
    previous_page_label = ' < '
    next_page_label = ' > '
    last_page_label = '>>'


def AdminTextOrderActive(active, language):
    if len(active) != 0:
        if language == "RU":
            return '–°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:'
        if language == "EN":
            return 'List of active orders'
    else:
        if language == "RU":
            return '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç ;('
        if language == "EN":
            return 'No active orders'


def adminSliderOrderActive(page, active, language):


    if len(active) != 0:

        paginator = adminSliderOrderPaginator(
            page_count=len(active),
            current_page=page,
            data_pattern='adminActiveOrder#{page}'
        )

        paginator.current_page_label = '¬∑ {} ¬∑'

        adminLookActive = types.InlineKeyboardButton("‚Ññ{} | {} BATH üü°".format(str(active[page - 1].id),
                                                                              str(active[page - 1].fullprice)),
                                                     callback_data="adminLookActive#{}".format(page - 1))
        paginator.add_before(adminLookActive)
        toBackButton =""
        if language == "RU":
            toBackButton = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data='adminOrders')
        if language == "EN":
            toBackButton = types.InlineKeyboardButton('Back ‚¨ÖÔ∏è', callback_data='adminOrders')
        paginator.add_after(toBackButton)

        return paginator.markup

    else:
        backingMenu = types.InlineKeyboardMarkup(row_width=1)

        backingButton = ""
        if language == "RU":
            backingButton = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data='adminOrders')
        if language == "EN":
            backingButton = types.InlineKeyboardButton('Back ‚¨ÖÔ∏è', callback_data='adminOrders')
        return backingMenu.add(backingButton)



def adminActiveInfoText(activeOrders: list, choosedOrder: int, language):

    order = activeOrders[choosedOrder]
    customer = db.getCustomer(order.customer_id)
    if language == "RU":
        head = f"–ó–∞–∫–∞–∑ ‚Ññ{order.id}\n\n"
        if db.getCustomer(order.customer_id).username is not None:
            head += f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{customer.username}\n\n'
        head += f'–Ø–∑—ã–∫: {customer.language}\n\n'
        head += '–¢–æ–≤–∞—Ä—ã:\n'
        items = order.items

        for item in items[:-1].split(','):
            head += "{} - {} –≥—Ä–∞–º–º - {} BATH\n".format(
                item.split('#')[0],
                item.split('#')[1],
                int(item.split('#')[1]) * int(item.split('#')[2])
            )

        head += f"\n\n–ò—Ç–æ–≥–æ: {order.fullprice} BATH"
        head += f"\n\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order.datetime}"
        head += f"\n\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.methodpay}"
        head += f"\n\n–ê–¥—Ä–µ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞: {order.address}"
        head += f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É: " \
                f"{order.comment if order.comment is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        if order.status.split('#')[0] == "–ü–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É":
            head += f"\n\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.status.split('#')[0]}"
            if order.status.split('#')[1] != "":
                head += f"\n–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏:\n{order.status.split('#')[1]}"
        else:
            head += f"\n\n–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞: {order.status}"
        return head
    if language == "EN":
        head = f"Order ‚Ññ{order.id}\n\n"
        if db.getCustomer(order.customer_id).username is not None:
            head += f'Customer: @{customer.username}\n\n'
        head += f'Language: {customer.language}\n\n'
        head += 'Items:\n'
        items = order.items

        for item in items[:-1].split(','):
            head += "{} - {} gram - {} BATH\n".format(
                item.split('#')[0],
                item.split('#')[1],
                int(item.split('#')[1]) * int(item.split('#')[2])
            )

        head += f"\n\nTotal: {order.fullprice} BATH"
        head += f"\n\nDate and time of order: {order.datetime}"
        if order.methodpay == "–Ω–∞–ª–∏—á–Ω—ã–µ":
            head += f"\n\nPayment: cash"
        head += f"\n\nAddress for delivery: {order.address}"
        head += f"\n\nComment for address: " \
                f'{order.comment if order.comment is not None else "did not point"}'
        if order.status.split('#')[0] == "–ü–µ—Ä–µ–¥–∞–Ω–æ –Ω–∞ –¥–æ—Å—Ç–∞–≤–∫—É":
            head += f"\n\nStatus order: sent for delivery"
            if order.status.split('#')[1] != "":
                head += f"\nEstimated delivery time:\n{order.status.split('#')[1]}"
        else:
            head += "\n\nStatus order: waiting for courier"
        return head

def adminActiveInfoMenu(activeOrders: list, choosedOrder: int, language):
    order = activeOrders[choosedOrder]
    activeMenu = types.InlineKeyboardMarkup(row_width=1)
    if language == "RU":
        button1 = types.InlineKeyboardButton("–ù–∞–ø–∏—Å–∞—Ç—å –ø–æ–∫—É–ø–∞—Ç–µ–ª—é",
                                             callback_data=f"messageToCustomer#{order.customer_id}#{order.id}#{choosedOrder}")

        button3 = types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑",
                                             callback_data=f"refusingActive#{order.id}#{choosedOrder}")

        button4 = types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑",
                                             callback_data=f"completingActive#{order.id}")

        button5 = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="activeList")

        activeMenu.add(button1)

        if order.status == "–æ–∂–∏–¥–∞–µ—Ç –∫—É—Ä—å–µ—Ä–∞":
            activeMenu.add(types.InlineKeyboardButton("–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å-–ø—Ä–∏–Ω—è—Ç—å –∫ –¥–æ—Å—Ç–∞–≤–∫–µ",
                                             callback_data=f"acceptingActive#{order.id}#{choosedOrder}"))

        activeMenu.add(button3, button4, button5)

        return activeMenu
    if language == "EN":
        button1 = types.InlineKeyboardButton("Write to customer",
                                           callback_data=f"messageToCustomer#{order.customer_id}#{order.id}#{choosedOrder}")

        button3 = types.InlineKeyboardButton("Cancel order",
                                             callback_data=f"refusingActive#{order.id}#{choosedOrder}")

        button4 = types.InlineKeyboardButton("Complete order",
                                             callback_data=f"completingActive#{order.id}")

        button5 = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="activeList")

        activeMenu.add(button1)

        if order.status == "–æ–∂–∏–¥–∞–µ—Ç –∫—É—Ä—å–µ—Ä–∞":
            activeMenu.add(types.InlineKeyboardButton("Update Status - accept for delivery",
                                                      callback_data=f"acceptingActive#{order.id}#{choosedOrder}"))

        activeMenu.add(button3, button4, button5)
        return activeMenu
def switchStatusText(language):
    if language == "RU":
        return "–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    if language == "EN":
        return "Order status updated successfully\nCustomer received notification"
def switchActiveToCompleteText(id: int, language):
    if language == "RU":
        return f"–ó–∞–∫–∞–∑ ‚Ññ{id} —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω"
    if language == "EN":
        return f"Order ‚Ññ{id} completed successfully"

def switchActiveToCompleteMenu(language):
    if language == "RU":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="activeList"))
    if language == "EN":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="activeList"))
def switchActiveToRefusalText(languageAdmin, languageCustomer):
    if languageAdmin == "RU":
        return f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥!\n–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è–∑—ã–∫: {languageCustomer}"
    if languageAdmin == "EN":
        return f"Enter a reason for canceling or go back!\nRecommended to use the language: {languageCustomer}"
def switchActiveToRefusalMenu(page: int, language):
    if language == "RU":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=f"activeToRefusalCancel#{page}"))
    if language == "EN":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data=f"activeToRefusalCancel#{page}"))

def infoActiveToRefusalText(id: int, language):
    if language == "RU":
        return f"–ó–∞–∫–∞–∑ ‚Ññ{id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–º–µ–Ω—ë–Ω\n–ü–æ–∫—É–ø–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"
    if language == "EN":
        return f"Order ‚Ññ{id} canceled successfully\nCustomer received notification"

def infoActiveToRefusalMenu(language):
    if language == "RU":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="activeList"))
    if language == "EN":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="activeList"))

def toCommunicateWithCustomerText(id: int, language):
    if language == "RU":
        return f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n–ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{id}\n" \
               f"–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —è–∑—ã–∫: {db.getLanguage(ao.getActiveOrder(id).customer_id)}"
    if language == "EN":
        return f"Write a message to the buyer\non order ‚Ññ{id}\n" \
               f"Recommended to use the language: {db.getLanguage(ao.getActiveOrder(id).customer_id)}"
def toCommunicateWithCustomerMenu(page: int, language):
    if language == "RU":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è",
                                                                       callback_data=f"adminCommunicateCancel#{page}"))
    if language == "EN":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("Back ‚¨ÖÔ∏è",
                                                                       callback_data=f"adminCommunicateCancel#{page}"))

def answerNextSendToCustomerText(idOrder: int, language):
    if language == "RU":
        return f'–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{idOrder} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ'
    if language == "EN":
        return f'Message to the buyer on order ‚Ññ{idOrder} successfully sent'
def answerNextSendToCustomerMenu(page: int, language):
    if language == "RU":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data=f"adminLookActive#{page}"))
    if language == "EN":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data=f"adminLookActive#{page}"))

def sendingToCustomerText(idOrder, text, language):
    if language == "RU":
        return f"–í–∞–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø—Ä–æ–¥–∞–≤—Ü–∞ –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{idOrder}:\n" + text
    if language == "EN":
        return f'You get message from seller on order ‚Ññ{idOrder}:\n' + text
def sendingToCustomerMenu(idOrder, idAdmin, language):
    if language == "RU":
        return types.InlineKeyboardMarkup().\
            add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"toAnswerToAdmin#{idAdmin}#{idOrder}"))
    if language == "EN":
        return types.InlineKeyboardMarkup(). \
            add(types.InlineKeyboardButton("To answer", callback_data=f"toAnswerToAdmin#{idAdmin}#{idOrder}"))

def toAnswerToAdminText(language):
    if language == "RU":
        return '–ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ:'
    if language == "EN":
        return 'Write a message:'
def toAnswerToAdminMenu(language):
    if language == "RU":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå", callback_data="answerToAdminCancel"))
    if language == "EN":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("Cancel ‚ùå", callback_data="answerToAdminCancel"))
def feedbackToCustomerAfterSendAdminText(language):
    if language == "RU":
        return "–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
    if language == "EN":
        return "Message has sent successfully"

def sendingToAdminText(idOrder, text, language):
    if language == "RU":
        return f'–ü–æ—Å—Ç—É–ø–∏–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –ø–æ –∑–∞–∫–∞–∑—É ‚Ññ{idOrder}:\n' + text
    if language == "EN":
        return f'Received a message from a customer on an order ‚Ññ{idOrder}:\n' + text


def sendingToAdminMenu(idOrder, idCustomer, language):
    if language == "RU":
        return types.InlineKeyboardMarkup().\
            add(types.InlineKeyboardButton("–û—Ç–≤–µ—Ç–∏—Ç—å", callback_data=f"messageToCustomer#{idCustomer}#{idOrder}"))
    if language == "EN":
        return types.InlineKeyboardMarkup(). \
            add(types.InlineKeyboardButton("Answer", callback_data=f"messageToCustomer#{idCustomer}#{idOrder}"))

def toAnswerToCustomerMenu(page: int, language):
    if language == "RU":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –∑–∞–∫–∞–∑",
                                                                           callback_data=f"adminCommunicateCancel#{page}"))
    if language == "EN":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("View his order",
                                                                           callback_data=f"adminCommunicateCancel#{page}"))
def AdminTextOrderRefusal(active, language):
    if len(active) != 0:
        if language == "RU":
            return '–°–ø–∏—Å–æ–∫ –æ—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:'
        if language == "EN":
            return 'List of canceled orders'
    else:
        if language == "RU":
            return '–û—Ç–º–µ–Ω—ë–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç ;('
        if language == "EN":
            return 'No canceled orders'
def adminSliderOrderRefusal(page, refusal, language):

    if len(refusal) != 0:

        paginator = adminSliderOrderPaginator(
            page_count=len(refusal),
            current_page=page,
            data_pattern='adminRefusalOrder#{page}'
        )

        paginator.current_page_label = '¬∑ {} ¬∑'

        adminLookActive = types.InlineKeyboardButton("‚Ññ{} | {} BATH üî¥".format(str(refusal[page - 1].id_from_active),
                                                                              str(refusal[page - 1].fullprice)),
                                                     callback_data="adminLookRefusal#{}".format(page - 1))
        paginator.add_before(adminLookActive)

        toBackButton = ""
        if language == "RU":
            toBackButton = types.InlineKeyboardButton('–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è', callback_data='adminOrders')
        if language == "EN":
            toBackButton = types.InlineKeyboardButton('Back ‚¨ÖÔ∏è', callback_data='adminOrders')
        paginator.add_after(toBackButton)

        return paginator.markup

    else:
        backingMenu = types.InlineKeyboardMarkup(row_width=1)

        if language == "RU":
            backingButton = types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="adminOrders")
            return backingMenu.add(backingButton)
        if language == "EN":
            backingButton = types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="adminOrders")
            return backingMenu.add(backingButton)


def adminRefusalInfoText(refusalOrders: list, choosedOrder: int, language):

    order = refusalOrders[choosedOrder]

    customer = db.getCustomer(order.customer_id)
    if language == "RU":
        head = f"–ó–∞–∫–∞–∑ ‚Ññ{order.id_from_active}\n\n"
        if db.getCustomer(order.customer_id).username is not None:
            head += f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{customer.username}\n\n'
        head += f'–Ø–∑—ã–∫: {customer.language}\n\n'
        head += '–¢–æ–≤–∞—Ä—ã:\n'

        items = order.items

        for item in items[:-1].split(','):
            head += "{} - {} –≥—Ä–∞–º–º - {} BATH\n".format(
                item.split('#')[0],
                item.split('#')[1],
                int(item.split('#')[1]) * int(item.split('#')[2])
            )

        head += f"\n\n–ò—Ç–æ–≥–æ: {order.fullprice} BATH"
        head += f"\n\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order.datetime}"
        head += f"\n\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –æ—Ç–∫–∞–∑–∞: {order.datetime_refuse}"
        head += f"\n\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.methodpay}"
        head += f"\n\n–ê–¥—Ä–µ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞: {order.address}"
        head += f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É: " \
                f"{order.comment if order.comment is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        head += f"\n\n–ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–∫–∞–∑–∞: {order.reason}"
        return head
    if language == "EN":
        head = f"Order ‚Ññ{order.id_from_active}\n\n"
        if db.getCustomer(order.customer_id).username is not None:
            head += f'Customer: @{customer.username}\n\n'
        head += f'Language: {customer.language}\n\n'
        head += 'Items:\n'

        items = order.items

        for item in items[:-1].split(','):
            head += "{} - {} gram - {} BATH\n".format(
                item.split('#')[0],
                item.split('#')[1],
                int(item.split('#')[1]) * int(item.split('#')[2])
            )

        head += f"\n\nTotal: {order.fullprice} BATH"
        head += f"\n\nDate and time of order: {order.datetime}"
        head += f"\n\nDate and time of canceling: {order.datetime_refuse}"
        if order.methodpay == "–Ω–∞–ª–∏—á–Ω—ã–µ":
            head += f"\n\nPayment: cash"
        head += f"\n\nAddress for order: {order.address}"
        head += f"\n\nCommet for address: " \
                f"{order.comment if order.comment is not None else 'did not point'}"
        head += f"\n\nReason of canceling: {order.reason}"
        return head

def adminRefusalInfoMenu(language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ù–∞–∑–∞–¥ ‚¨ÖÔ∏è", callback_data="refusalList"))
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Back ‚¨ÖÔ∏è", callback_data="refusalList"))

def AdminTextOrderComplete(complete: list, language):
    if len(complete) != 0:
        if language == "RU":
            return '–°–ø–∏—Å–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤:'
        if language == "EN":
            return 'List of completed orders:'
    else:
        if language == "RU":
            return '–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç!'
        if language == "EN":
            return 'No completed orders!'
def adminSliderOrderComplete(page, complete, language):

    if len(complete) != 0:

        paginator = adminSliderOrderPaginator(
            page_count=len(complete),
            current_page=page,
            data_pattern='adminCompleteOrder#{page}'
        )

        paginator.current_page_label = '¬∑ {} ¬∑'

        adminLookActive = types.InlineKeyboardButton("‚Ññ{} | {} BATH üü¢".format(str(complete[page - 1].id_from_active),
                                                                              str(complete[page - 1].fullprice)),
                                                     callback_data="adminLookComplete#{}".format(page - 1))
        paginator.add_before(adminLookActive)
        toBackButton = ""
        if language == "RU":
            toBackButton = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='adminOrders')
        if language == "EN":
            toBackButton = types.InlineKeyboardButton('Back', callback_data='adminOrders')
        paginator.add_after(toBackButton)

        return paginator.markup

    else:
        backingMenu = types.InlineKeyboardMarkup(row_width=1)
        if language == "RU":
            backingButton = types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="adminOrders")
            return backingMenu.add(backingButton)
        if language == "EN":
            backingButton = types.InlineKeyboardButton("Back", callback_data="adminOrders")
            return backingMenu.add(backingButton)


def adminCompleteInfoText(completeOrders: list, choosedOrder: int, language):

    order = completeOrders[choosedOrder]

    customer = db.getCustomer(order.customer_id)
    if language == "RU":
        head = f"–ó–∞–∫–∞–∑ ‚Ññ{order.id_from_active}\n\n"
        if db.getCustomer(order.customer_id).username is not None:
            head += f'–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{customer.username}\n\n'
        head += f'–Ø–∑—ã–∫: {customer.language}\n\n'
        head += '–¢–æ–≤–∞—Ä—ã:\n'

        items = order.items

        for item in items[:-1].split(','):
            head += "{} - {} –≥—Ä–∞–º–º - {} BATH\n".format(
                item.split('#')[0],
                item.split('#')[1],
                int(item.split('#')[1]) * int(item.split('#')[2])
            )

        head += f"\n\n–ò—Ç–æ–≥–æ: {order.fullprice} BATH"
        head += f"\n\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–∫–∞–∑–∞: {order.datetime}"
        head += f"\n\n–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: {order.datetime_complete}"
        head += f"\n\n–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: {order.methodpay}"
        head += f"\n\n–ê–¥—Ä–µ—Å –¥–ª—è –∑–∞–∫–∞–∑–∞: {order.address}"
        head += f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∞–¥—Ä–µ—Å—É: " \
                f"{order.comment if order.comment is not None else '–Ω–µ —É–∫–∞–∑–∞–Ω'}"
        return head
    if language == "EN":
        head = f"Order ‚Ññ{order.id_from_active}\n\n"
        if db.getCustomer(order.customer_id).username is not None:
            head += f'Customer: @{customer.username}\n\n'
        head += f'Language: {customer.language}\n\n'
        head += 'Items:\n'

        items = order.items

        for item in items[:-1].split(','):
            head += "{} - {} gram - {} BATH\n".format(
                item.split('#')[0],
                item.split('#')[1],
                int(item.split('#')[1]) * int(item.split('#')[2])
            )

        head += f"\n\nTotal: {order.fullprice} BATH"
        head += f"\n\nDate and time of order: {order.datetime}"
        head += f"\n\nDate and time of completed: {order.datetime_complete}"
        if order.methodpay == "–Ω–∞–ª–∏—á–Ω—ã–µ":
            head += f"\n\nPayment: cash"
        head += f"\n\nAddress of order: {order.address}"
        head += f"\n\nComment for address: " \
                f"{order.comment if order.comment is not None else 'did not point'}"
        return head
def adminCompleteInfoMenu(language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="completeList"))
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(types.InlineKeyboardButton("Back", callback_data="completeList"))

def showNewActiveOrderText(idOrder, language):
    if language == "RU":
        return f'–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ{idOrder}'
    if language == "EN":
        return f'New order ‚Ññ{idOrder}'
def showNewActiveOrderMenu(page: int, language):
    if language == "RU":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–∫–∞–∑",
                                                                       callback_data=f"adminCommunicateCancel#{page}"))
    if language == "EN":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("View order",
                                                                           callback_data=f"adminCommunicateCancel#{page}"))
def infoReason(idOrder, text, language):
    if language == "RU":
        return f"–ü—Ä–æ–¥–∞–≤–µ—Ü –æ—Ç–º–µ–Ω–∏–ª –∑–∞–∫–∞–∑ ‚Ññ{idOrder}\n–ü—Ä–∏—á–∏–Ω–∞: {text}"
    elif language == "EN":
        return f'Seller has refused order ‚Ññ{idOrder}\nReason: {text}'
def infoAccept(idOrder, language):
    if language == "RU":
        return f'–ó–∞–∫–∞–∑ ‚Ññ{idOrder} –ø—Ä–∏–Ω—è—Ç –≤ –¥–æ—Å—Ç–∞–≤–∫—É'

    elif language == "EN":
        return f'Order ‚Ññ{idOrder} was sent for delivery'

def infoAcceptWithTime(order, language):
    print(order.status)
    if language == "RU":
        return f'–ó–∞–∫–∞–∑ ‚Ññ{order.id} –ø—Ä–∏–Ω—è—Ç –≤ –¥–æ—Å—Ç–∞–≤–∫—É\n–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {order.status.split("#")[1]}'

    elif language == "EN":
        return f'Order ‚Ññ{order.id} was sent for delivery\nEstimated delivery time: {order.status.split("#")[1]}'

def adminBeforePostTextRU(language):
    if language == "RU":
        return "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–¥–æ 450 —Å–∏–º–≤–æ–ª–æ–≤):"
    if language == "EN":
        return "Enter the text of the post in Russian (up to 450 characters):"

def adminBeforePostTextEN(language):
    if language == "RU":
        return "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ (–¥–æ 450 —Å–∏–º–≤–æ–ª–æ–≤):"
    if language == "EN":
        return "Enter the text of the post in English (up to 450 characters):"

def warningPostText(language, length):
    if language == "RU":
        return f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏—è 450 —Å–∏–º–≤–æ–ª–æ–≤: –≤—ã –≤–≤–µ–ª–∏ {length}"
    if language == "EN":
        return f"Maximum message length is 450 characters: you entered {length}"

def warningProductText(language, length):
    if language == "RU":
        return f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏—è 900 —Å–∏–º–≤–æ–ª–æ–≤: –≤—ã –≤–≤–µ–ª–∏ {length}"
    if language == "EN":
        return f"Maximum description length is 900 characters: you entered {length}"

def warningPostMenuRU(language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data="wrongLengthPost#RU"),
            types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="resetPost")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Try again", callback_data="wrongLengthPost#RU"),
            types.InlineKeyboardButton("Reset", callback_data="resetPost")
        )
def warningPostMenuEN(language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data="wrongLengthPost#EN"),
            types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="resetPost")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Try again", callback_data="wrongLengthPost#EN"),
            types.InlineKeyboardButton("Reset", callback_data="resetPost")
        )
def adminBeforePostMenu(language):
    if language == "RU":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="resetPost"))
    if language == "EN":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("Reset", callback_data="resetPost"))
def adminGetTypePostText(textRU, textEN, language):
    if language == "RU":
        return f"–¢–µ–∫—Å—Ç –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{textRU}" \
               f"\n\n–¢–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{textEN}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å—Ç–∞"
    if language == "EN":
        return f"Text for russian customers:\n{textRU}" \
               f"\n\nText for english customer:\n{textEN}\n\nChoose an attachment for a post"
def adminGetTypePostMenu(language):
    menu = types.InlineKeyboardMarkup(row_width=1)
    if language == "RU":
        b1 = types.InlineKeyboardButton("–í–∏–¥–µ–æ", callback_data=f"attachVideo")
        b2 = types.InlineKeyboardButton("–§–æ—Ç–æ", callback_data=f"attachPhoto")
        b3 = types.InlineKeyboardButton("–ë–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è", callback_data=f"noAttach")
        b4 = types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="resetPost")
        return menu.add(b1, b2, b3, b4)
    if language == "EN":
        b1 = types.InlineKeyboardButton("Video", callback_data=f"attachVideo")
        b2 = types.InlineKeyboardButton("Photo", callback_data=f"attachPhoto")
        b3 = types.InlineKeyboardButton("No attachment", callback_data=f"noAttach")
        b4 = types.InlineKeyboardButton("Reset", callback_data="resetPost")
        return menu.add(b1, b2, b3, b4)
def adminPostToAttachPhoto(language):
    if language == "RU":
        return '–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ:'
    if language == "EN":
        return 'Attach and send a photo:'

def adminPostToAttachVideo(language):
    if language == "RU":
        return f'–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ mp4:'
    if language == "EN":
        return f'Attach video in mp4 format:'
def adminFinalPostText(textRU, textEN, language):
    if language == "RU":
        return f"–¢–µ–∫—Å—Ç –¥–ª—è —Ä—É—Å—Å–∫–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{textRU}\n\n–¢–µ–∫—Å—Ç –Ω–∞ –∞–Ω–≥–ª–æ—è–∑—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n{textEN}"
    if language == "EN":
        return f"Text for russian customers:\n{textRU}\n\nText for english customers:\n{textEN}"

def adminFinalPostMenu(language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="adminToPublishPost"),
            types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="resetPost")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Publish", callback_data="adminToPublishPost"),
            types.InlineKeyboardButton("Reset", callback_data="resetPost")
        )

def adminListProductText(products, language):
    if len(products) != 0:
        if language == "RU":
            return '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è'
        if language == "EN":
            return 'Select an item to view or delete'
    else:
        if language == "RU":
            return '–°–µ–π—á–∞—Å —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ'
        if language == "EN":
            return "No items in the shop"

def adminSliderShop(page, products, language):
    if len(products) != 0:

        nameOfProducts = list(i.name for i in products)
        idOrders = list(i.id for i in products)
        paginator = sliderShopPaginator(page_count=len(products),
                                        current_page=page,
                                        data_pattern='adminListProduct#{page}')

        lookProduct = types.InlineKeyboardButton('{}'.format(nameOfProducts[page - 1]),
                                                 callback_data='adminProductName#{}'.format(idOrders[page - 1]))
        paginator.add_before(lookProduct)


        if language == "RU":
            toAddProduct = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='adminAddProduct')

            toBackButton = types.InlineKeyboardButton('–ù–∞–∑–∞–¥', callback_data='toMainAdmin')
            paginator.add_after(toBackButton, toAddProduct)

        if language == "EN":
            toAddProduct = types.InlineKeyboardButton('Add item', callback_data='adminAddProduct')

            toBackButton = types.InlineKeyboardButton('Back', callback_data='toMainAdmin')
            paginator.add_after(toBackButton, toAddProduct)

        return paginator.markup

    else:
        if language == "RU":
            return types.InlineKeyboardMarkup(row_width=1).add(
                types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä', callback_data='adminAddProduct'),
                types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="toMainAdmin")
            )
        if language == "EN":
            return types.InlineKeyboardMarkup(row_width=1).add(
                types.InlineKeyboardButton('Add item', callback_data='adminAddProduct'),
                types.InlineKeyboardButton("Back", callback_data="toMainAdmin")
            )


def adminTextProduct(product, language, pageOfLanguage):
    if language == "RU":
        if pageOfLanguage == 1:
            return f'''–í–ó–ì–õ–Ø–î–û–ú RU –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n
        
{product.name}

{product.infoAbout.split('#')[0]}

–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –æ—Å—Ç—Ä–æ–≤—É
1 –≥—Ä–∞–º–º - {product.price} BATH
'''
        if pageOfLanguage == 2:
            return f'''–í–ó–ì–õ–Ø–î–û–ú EN –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n

{product.name}

{product.infoAbout.split('#')[1]}

Delivery on the whole Island
1 gram - {product.price} BATH'''

    if language == "EN":
        if pageOfLanguage == 1:
            return f'''RU USER'S VIEW:\n
        
{product.name}

{product.infoAbout.split('#')[0]}

–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –æ—Å—Ç—Ä–æ–≤—É
1 –≥—Ä–∞–º–º - {product.price} BATH
'''
        if pageOfLanguage == 2:
            return f'''EN USER'S VIEW:\n

{product.name}

{product.infoAbout.split('#')[1]}

Delivery on the whole Island
1 gram - {product.price} BATH'''

def adminProductMenu1(idOrder, language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", callback_data=f"changePageLanguageTo2#{idOrder}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"adminChangeName#{idOrder}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å RU –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"adminChangeInfoAboutRU#{idOrder}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å EN –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"adminChangeInfoAboutEN#{idOrder}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"adminChangePrice#{idOrder}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data=f"adminChangeMedia#{idOrder}"),
            types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"adminDeleteProduct#{idOrder}"),
            types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="adminCatalogFromMedia")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Change language view", callback_data=f"changePageLanguageTo2#{idOrder}"),
            types.InlineKeyboardButton("Change name", callback_data=f"adminChangeName#{idOrder}"),
            types.InlineKeyboardButton("Change RU text", callback_data=f"adminChangeInfoAboutRU#{idOrder}"),
            types.InlineKeyboardButton("Change EN text", callback_data=f"adminChangeInfoAboutEN#{idOrder}"),
            types.InlineKeyboardButton("Change price", callback_data=f"adminChangePrice#{idOrder}"),
            types.InlineKeyboardButton("Change media", callback_data=f"adminChangeMedia#{idOrder}"),
            types.InlineKeyboardButton("Delete item", callback_data=f"adminDeleteProduct#{idOrder}"),
            types.InlineKeyboardButton("Back", callback_data="adminCatalogFromMedia")
        )
def adminProductMenu2(idOrder, language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", callback_data=f"changePageLanguageTo1#{idOrder}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ", callback_data=f"adminChangeName#{idOrder}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å RU –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"adminChangeInfoAboutRU#{idOrder}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å EN –æ–ø–∏—Å–∞–Ω–∏–µ", callback_data=f"adminChangeInfoAboutEN#{idOrder}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f"adminChangePrice#{idOrder}"),
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å –º–µ–¥–∏–∞", callback_data=f"adminChangeMedia#{idOrder}"),
            types.InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä", callback_data=f"adminDeleteProduct#{idOrder}"),
            types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="adminCatalogFromMedia")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Change language view", callback_data=f"changePageLanguageTo1#{idOrder}"),
            types.InlineKeyboardButton("Change name", callback_data=f"adminChangeName#{idOrder}"),
            types.InlineKeyboardButton("Change RU text", callback_data=f"adminChangeInfoAboutRU#{idOrder}"),
            types.InlineKeyboardButton("Change EN text", callback_data=f"adminChangeInfoAboutEN#{idOrder}"),
            types.InlineKeyboardButton("Change price", callback_data=f"adminChangePrice#{idOrder}"),
            types.InlineKeyboardButton("Change media", callback_data=f"adminChangeMedia#{idOrder}"),
            types.InlineKeyboardButton("Delete item", callback_data=f"adminDeleteProduct#{idOrder}"),
            types.InlineKeyboardButton("Back", callback_data="adminCatalogFromMedia")
        )
def changeMediaText(language):
    if language == "RU":
        return "–í—ã–±–µ—Ä–∏—Ç–µ –≤–ª–æ–∂–µ–Ω–∏–µ"
    if language == "EN":
        return "Choose attachment"
def changeMediaMenu(language, idProduct):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–§–æ—Ç–æ", callback_data=f"changeMediaToPhoto#{idProduct}"),
            types.InlineKeyboardButton("–í–∏–¥–µ–æ", callback_data=f"changeMediaToVideo#{idProduct}"),
            types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"resetChanging#{idProduct}")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Photo", callback_data=f"changeMediaToPhoto#{idProduct}"),
            types.InlineKeyboardButton("Video", callback_data=f"changeMediaToVideo#{idProduct}"),
            types.InlineKeyboardButton("Back", callback_data=f"resetChanging#{idProduct}")
        )
def delProductText(language):
    if language == "RU":
        return "–¢–æ–≤–∞—Ä —É–¥–∞–ª–µ–Ω –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞"
    if language == "EN":
        return "Item was deleted from shop"

def adminAddProductName(language):
    if language == "RU":
        return '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞\n(–ö—Ä–∞—Ç–∫–æ, —á—Ç–æ–±—ã –≤–º–µ—Å—Ç–∏–ª–æ—Å—å –≤ –∫–Ω–æ–ø–∫—É)'
    if language == "EN":
        return 'Enter product name\n(Short to fit in button)'
def adminAddProductNameMenu(language):
    if language == "RU":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="resetProduct"))
    if language == "EN":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("Reset", callback_data="resetProduct"))
def adminAddProductTextRU(language):
    if language == "RU":
        return '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º (–Ω–µ –±–æ–ª–µ–µ 900 —Å–∏–º–≤–æ–ª–æ–≤):'
    if language == "EN":
        return 'Enter product description in Russian (no more than 900 characters)'

def adminAddProductTextEN(language):
    if language == "RU":
        return '–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º (–Ω–µ –±–æ–ª–µ–µ 900 —Å–∏–º–≤–æ–ª–æ–≤):'
    if language == "EN":
        return 'Enter product description in English (no more than 900 characters)'

def adminAddProductPrice(language):
    if language == "RU":
        return '–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ 1 –≥—Ä–∞–º–º –≤ –≤–∞–ª—é—Ç–µ BATH:'
    if language == "EN":
        return 'Enter the price for 1 gram in BATH currency'
def adminAddProductMediaText(product, language):
    if language == "RU":
        return f'''–í–ó–ì–õ–Ø–î–û–ú RU –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n
        
{product.name}

{product.infoAbout.split('#')[0]}

–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –æ—Å—Ç—Ä–æ–≤—É
1 –≥—Ä–∞–º–º - {product.price} BATH


–í–ó–ì–õ–Ø–î–û–ú EN –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:\n

{product.name}

{product.infoAbout.split('#')[1]}

Delivery on the whole Island
1 gram - {product.price} BATH
'''
    if language == "EN":
        return f'''RU USER'S VIEW:\n
        
{product.name}

{product.infoAbout.split('#')[0]}

–î–æ—Å—Ç–∞–≤–∫–∞ –ø–æ –≤—Å–µ–º—É –æ—Å—Ç—Ä–æ–≤—É
1 –≥—Ä–∞–º–º - {product.price} BATH


EN USER'S VIEW:\n

{product.name}

{product.infoAbout.split('#')[1]}

Delivery on the whole Island
1 gram - {product.price} BATH


Choose attachment type:'''


def adminAddProductMediaMenu(language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–í–∏–¥–µ–æ", callback_data=f"attachVideoToProduct"),
            types.InlineKeyboardButton("–§–æ—Ç–æ", callback_data=f"attachPhotoToProduct"),
            # types.InlineKeyboardButton("–ù–µ—Å–∫–æ–ª—å–∫–æ –º–µ–¥–∏–∞", callback_data=f"attachMediaGroupToProduct"),
            types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="resetProduct")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Video", callback_data=f"attachVideoToProduct"),
            types.InlineKeyboardButton("Photo", callback_data=f"attachPhotoToProduct"),
            # types.InlineKeyboardButton("Media group", callback_data=f"attachMediaGroupToProduct"),
            types.InlineKeyboardButton("Reset", callback_data="resetProduct")
        )
def adminFinalProductMenu1(language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", callback_data="switchViewNewItemToPageOfLanguageTo2"),
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ", callback_data="addProductInStart"),
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü", callback_data="addProductInFinish"),
            types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="resetProduct")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Change language view", callback_data="switchViewNewItemToPageOfLanguageTo2"),
            types.InlineKeyboardButton("Add to start", callback_data="addProductInStart"),
            types.InlineKeyboardButton("Add to end", callback_data="addProductInFinish"),
            types.InlineKeyboardButton("Reset", callback_data="resetProduct")
        )
def adminFinalProductMenu2(language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", callback_data="switchViewNewItemToPageOfLanguageTo1"),
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –Ω–∞—á–∞–ª–æ", callback_data="addProductInStart"),
            types.InlineKeyboardButton("–î–æ–±–∞–≤–∏—Ç—å –≤ –∫–æ–Ω–µ—Ü", callback_data="addProductInFinish"),
            types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="resetProduct")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Change language view", callback_data="switchViewNewItemToPageOfLanguageTo1"),
            types.InlineKeyboardButton("Add to start", callback_data="addProductInStart"),
            types.InlineKeyboardButton("Add to end", callback_data="addProductInFinish"),
            types.InlineKeyboardButton("Reset", callback_data="resetProduct")
        )

def feedbackAdminNewPost(language):
    if language == "RU":
        return "–¢–æ–≤–∞—Ä –¥–æ–±–∞–≤–ª–µ–Ω –≤ –º–∞–≥–∞–∑–∏–Ω\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
    if language == "EN":
        return "Item added to shop\nCustomers received notifications"
def feedbackNewPost(language):
    if language == "RU":
        return "–ó–∞–≥–ª—è–Ω–∏ –≤ –º–∞–≥–∞–∑–∏–Ω!\n–¢–∞–º –∫–æ–µ —á—Ç–æ –Ω–æ–≤–µ–Ω—å–∫–æ–µ –∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ"
    elif language == "EN":
        return "Look to shop\nThere is something new and interesting"


def adminChangeMenu(idProduct, language):
    if language == "RU":
        return types.InlineKeyboardMarkup().add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"resetChanging#{idProduct}"))
    if language == "EN":
        return types.InlineKeyboardMarkup().add(
            types.InlineKeyboardButton("Back", callback_data=f"resetChanging#{idProduct}"))

def adminSwitcherLanguageText(language):
    if language == "RU":
        return "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫"
    if language == "EN":
        return "Choose language"
def adminSwitcherLanguageMenu():
    switchLanguageProfile = types.InlineKeyboardMarkup(row_width=1)
    languageProfileEN = types.InlineKeyboardButton("English", callback_data="adminToEnLanguage")
    languageProfileRU = types.InlineKeyboardButton("–†—É—Å—Å–∫–∏–π", callback_data="adminToRuLanguage")
    return switchLanguageProfile.add(languageProfileEN, languageProfileRU)


# def adminTextMediaGroupToProduct(language):
#     if language == "RU":
#         return "–ü–û –û–î–ù–û–ú–£ –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ —Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ png,jpg/mp4 (–æ—Ç 2 –¥–æ 10 –≤ —Å—É–º–º–µ)"
#     if language == "EN":
#         return "Send photos/videos in png,jpg/mp4 format ONE BY ONE (from 2 to 10 in total)"
#
# def adminMenuMediaGroupToProduct(language):
#     if language == "RU":
#         return types.InlineKeyboardMarkup(row_width=1).add(
#             types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="resetProduct")
#         )
#     if language == "EN":
#         return types.InlineKeyboardMarkup(row_width=1).add(
#             types.InlineKeyboardButton("Reset", callback_data="resetProduct")
#         )
#
# def videoHadUploaded(countMedia, language):
#     if language == "RU":
#         return f'–í–∏–¥–µ–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n–î–æ–±–∞–≤–ª–µ–Ω–æ {countMedia} –∏–∑ 10 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π'
#     if language == "EN":
#         return f'Video has uploaded\nAdded {countMedia} out of 10 possible attachments'
#
# def photoHasUploaded(countMedia, language):
#     if language == "RU":
#         return f'–§–æ—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ\n–î–æ–±–∞–≤–ª–µ–Ω–æ {countMedia} –∏–∑ 10 –≤–æ–∑–º–æ–∂–Ω—ã—Ö –≤–ª–æ–∂–µ–Ω–∏–π'
#     if language == "EN":
#         return f'Photo has uploaded\nAdded {countMedia} out of 10 possible attachments'
#
# def askToAddMoreMediaMenu(countMedia, language):
#     if language == "RU":
#         menu = types.InlineKeyboardMarkup(row_width=1)
#         if countMedia >= 2:
#             menu.add(types.InlineKeyboardButton("–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏–µ", callback_data="finishAttachment"))
#         menu.add(types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data="resetProduct"))
#         return menu
#     if language == "EN":
#         menu = types.InlineKeyboardMarkup(row_width=1)
#         if countMedia >= 2:
#             menu.add(types.InlineKeyboardButton("Finish attaching", callback_data="finishAttachment"))
#         menu.add(types.InlineKeyboardButton("Reset", callback_data="resetProduct"))
#         return menu

def warningOverflowCaption(language, lenght: int):
    if language == "RU":
        return f'–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ 1024\n–° —Ç–∞–∫–∏–º –æ–ø–∏—Å–∞–Ω–∏–µ–º —Ç–æ–≤–∞—Ä –±—É–¥–µ—Ç –∏–º–µ—Ç—å {lenght}'
    if language == "EN":
        return f'The maximum number of characters is 1024\nWith this description, the product will have {lenght}'

# def warningOverflowCaptionMenu(language, idProduct):
#     if language == "RU":
#         return types.InlineKeyboardMarkup(row_width=1).add(
#             types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"adminChangeInfoAbout#{idProduct}"),
#             types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"resetChanging#{idProduct}")
#         )
#     if language == "EN":
#         return types.InlineKeyboardMarkup(row_width=1).add(
#             types.InlineKeyboardButton("Try again", callback_data=f"adminChangeInfoAbout#{idProduct}"),
#             types.InlineKeyboardButton("Back", callback_data=f"resetChanging#{idProduct}")
#         )

def warningOverflowCaptionMenuRU(language, idProduct):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"adminChangeInfoAboutRU#{idProduct}"),
            types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"resetChanging#{idProduct}")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Try again", callback_data=f"adminChangeInfoAboutRU#{idProduct}"),
            types.InlineKeyboardButton("Back", callback_data=f"resetChanging#{idProduct}")
        )

def warningOverflowCaptionMenuEN(language, idProduct):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"adminChangeInfoAboutEN#{idProduct}"),
            types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f"resetChanging#{idProduct}")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Try again", callback_data=f"adminChangeInfoAboutEN#{idProduct}"),
            types.InlineKeyboardButton("Back", callback_data=f"resetChanging#{idProduct}")
        )


# def warningOverflowCaptionForItemMenu(language):
#     if language == "RU":
#         return types.InlineKeyboardMarkup(row_width=1).add(
#             types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"adminOverflowDescriptionNewItem"),
#             types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"resetProduct")
#         )
#     if language == "EN":
#         return types.InlineKeyboardMarkup(row_width=1).add(
#             types.InlineKeyboardButton("Try again", callback_data=f"adminOverflowDescriptionNewItem"),
#             types.InlineKeyboardButton("Reset", callback_data=f"resetProduct")
#         )

def warningOverflowCaptionForProductMenu1(language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"adminOverflowDescriptionNewProductRU"),
            types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"resetProduct")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Try again", callback_data=f"adminOverflowDescriptionNewProductRU"),
            types.InlineKeyboardButton("Reset", callback_data=f"resetProduct")
        )

def warningOverflowCaptionForProductMenu2(language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"adminOverflowDescriptionNewProductEN"),
            types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"resetProduct")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Try again", callback_data=f"adminOverflowDescriptionNewProductEN"),
            types.InlineKeyboardButton("Reset", callback_data=f"resetProduct")
        )

def wrongDigitPriceText(language):
    if language == "RU":
        return '–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º! (–¥–æ 12345678)'
    if language == "EN":
        return 'Price must be a number! (up to 12345678)'
def wrongDigitPriceMenu(language):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–ø—ã—Ç–∫—É", callback_data=f"adminWrongDigitPrice"),
            types.InlineKeyboardButton("–°–±—Ä–æ—Å–∏—Ç—å", callback_data=f"resetProduct")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Try again", callback_data=f"adminWrongDigitPrice"),
            types.InlineKeyboardButton("Reset", callback_data=f"resetProduct")
        )

def errorAddressText(language):
    if language == "RU":
        return '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∞–¥—Ä–µ—Å–∞\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º —É–∫–∞–∑–∞–Ω–∏—è –∞–¥—Ä–µ—Å–∞'
    if language == "EN":
        return 'Error for search the address\nTry again or use another method of pointing address'

def exitAdminText(language):
    if language == "RU":
        return '–¢–µ–ø–µ—Ä—å —Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—å'
    if language == "EN":
        return 'You are customer now'

def enterEstimatedDeliveryTimeText(language):
    if language == "RU":
        return '–í–≤–µ–¥–∏—Ç–µ –æ—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏\n–ù–∞–ø—Ä–∏–º–µ—Ä 19:00 –∏–ª–∏ 16:00-17:30'
    if language == "EN":
        return "Enter estimated delivery time\nFor example 19:00 or 16:00-17:30"

def enterEstimatedDeliveryTimeMenu(language, idOrder):
    if language == "RU":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data=f"skipEstimatedTime#{idOrder}")
        )
    if language == "EN":
        return types.InlineKeyboardMarkup(row_width=1).add(
            types.InlineKeyboardButton("Skip", callback_data=f"skipEstimatedTime#{idOrder}")
        )